---
title: "Transformations"
webr:
  packages:
    - ggformula
    - ggResidpanel
format: 
  live-html:
    toc: true
engine: knitr
editor: source
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}



## Example: Mammal brain weights

Researchers wish to understand the relationship between the brain weights (y, in grams) and body weights (x, in kilograms) of mammals. They have data on a sample of 30 species of mammals, which can be loaded using the code shown below:

```{webr}
library(ggformula)
library(ggResidpanel)
weight <-  read.csv("https://aloy.github.io/stat230-materials/data/weights.csv")
```

(a) Fit a simple linear regression model using body weight to predict brain weight.

```{webr}
#| min-lines: 3
```


(b) Create a scatterplot of $y$ versus $x$ with a regression line, a plot of the residuals vs. predicted (or "fitted") values ($\widehat{y}$), and either a normal Q-Q plot or a histogram of the residuals. (Remember that you can use the `resid_panel()` command in the `ggResidpanel` R package for residual plots.) Summarize what issues you see with the regression conditions.

```{webr}
#| min-lines: 8
```


(b) Try various transformations of the explanatory and response variables to create a better linear regression model. (Hint: Notice that both the $x$ and $y$ variables are right skewed and have outliers, both may need a transformation.) What transformation(s) seem to remedy the issues you saw in part (b)?

```{webr}
#| min-lines: 8
```



## Back-transforming your model

In Example 1 you selected transformation(s) to help "linearize" the relationship between brain weights and body weights. While this is helpful from a statistical perspective, it's often preferred to plot the fitted model on the **original scale** of the data. To do this, we need to back-transform the model using the following steps:


- Start by creating a scatterplot on the original scale. 
- Add a `gf_lm()` layer, specifying the transformations in the `formula` and **if $y$ is transformed** how to back-transform $y$ via the `backtrans` argument. 

For example, if we log-transformed both `x` and `y`, then we pass `log(y) ~ log(x)` in as the formula to `gf_lm()` and `backtrans = exp` to back-transform `y`. Below is the full call where `df` is the data set with columns `xvar` and `yvar`. 
```{r}
#| eval: false
# change variable names and data set name here
gf_point(yvar ~ xvar, data = df) |> 
  gf_lm(formula = log(y) ~ log(x), backtrans = exp, interval = "confidence")
```

Use this idea to plot the fitted model relating brain weights and body weights on the original scale.

```{webr}
#| min-lines: 3
```



