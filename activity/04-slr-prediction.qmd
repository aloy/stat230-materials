---
title: "Inference for Prediction in SLR"
webr:
  packages:
    - ggformula
format: 
  live-html:
    toc: true
engine: knitr
editor: source
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}


## Loading data

For this activity you will consider predicting the price of a used car (it's Kelly Blue Book value) based on its mileage. The data set is loaded by running the following code chunk:

```{webr}
cars <- read.csv("https://aloy.rbind.io/kuiper_data/Cars.csv")
```

The columns of interest are `Price` and `Mileage`.


## Fitting a simple linear regression model

Use the `lm()` command to fit the simple linear regression
model where Mileage is used to predict Price.

```{webr}
#| min-lines: 3
# Write your lm() command here
```


**Q1.** Report the fitted regression equation.


## Making predictions

The first car in the data set is a Buick Century with 8221
miles.

**Q2.** Calculate the expected price of this car using the fitted regression equation. (You may use R or do this by hand. There's a code chunk below for your convenience)

```{webr}
#| min-lines: 3
# Write your code here
```

**Q3.** If we want to predict the price of **this** car, should we use a confidence interval or a prediction interval?

**Q4.** Use R to construct the appropriate 89% interval for the price of this car.

```{webr}
#| min-lines: 3
# Write your code here
```

**Q5.** Interpret the interval in context.


## Plotting our intervals

It can be useful to plot your confidence/prediction intervals to communicate your findings to a broader audience. The code below creates a scatterplot of the data, adds the fitted regression line, and then adds 89% prediction intervals.

```{webr}
gf_point(Price ~ Mileage, data = cars) |> 
  gf_lm(interval = "prediction") |>
  gf_lm(interval = "confidence", alpha = 0.6)
```

**Q6.** Which is the prediction invterval and which is the confidence interval? How can you tell?


***

## Function quick reference

The following table summarizes the functions we learned today:

| Function | Purpose |
|----|-----------|
| `lm(formula, data)` | Fit a linear model |
| `predict(model, newdata, interval, level, se.fit)` | Make predictions and | calculate intervals |
| `gf_point(formula, data) |> gf_lm(interval = "confidence")` | Plot data and add confidence intervals for the mean response|
| `gf_point(formula, data) |> gf_lm(interval = "prediction")` | Plot data and add prediction intervals for the mean response|



