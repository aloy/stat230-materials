{
  "hash": "372fcb758c82128bf63725f699902716",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Polynomial Regression\"\nformat: docx\nengine: knitr\neditor: source\n---\n\n\n\n\n## Loading data\n\nTo load the wildfires data set, run the following code chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwildfires <- read.csv(\"https://aloy.github.io/stat230-materials/data/wildfires.csv\")\n```\n:::\n\n\n\n\n## Fitting a polynomial regression model\n\nTo fit a polynomial regression model we still use the `lm()` command, but we expand our formula to include polynomial terms. To include polynomial terms in a regression model, we need to use the `I()` function to indicate that we want to calculate a polynomial term. For example, to fit the quadratic model we have already discussed in class, we use the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquadratic_lm <- lm(Acres ~ Year + I(Year^2), data = wildfires)\n```\n:::\n\n\nOnce you have your fitted model, we can explore it like we have with simple linear regression models.\n\n\n\n\n\n\n## Exploring a cubic model\n\nLet's fit a cubic model to the wildfires data set. The cubic model has the form \n$$\\mu \\lbrace y | x \\rbrace = \\beta_0 + \\beta_1 x + \\beta_2x^2 + \\beta_3x^3.$$\nUse the `lm()` command to fit the cubic model where `Year` is used to predict `Acres`.\n\n\nTo plot the fitted cubic model, you can use the `gf_point()` and `gf_lm()` functions from the `ggformula` package. The following code will create a scatter plot of the data and add the fitted cubic regression line:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_point(Acres ~ Year, data = wildfires, xlab = \"Year\", ylab = \"Acres burned\") |>\n  gf_lm(formula = y ~ poly(x, 3), size = .5) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using the `size` aesthetic with geom_line was deprecated in ggplot2 3.4.0.\nâ„¹ Please use the `linewidth` aesthetic instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](07H-mlr-polynomial_files/figure-docx/unnamed-chunk-4-1.png)\n:::\n:::\n\n\n:::{.callout-note}\nIn the `gf_lm()` layer we use the `poly(x, 3)` function to specify that we want to fit a cubic polynomial. You can use `poly()` to fit polynomials of any degree by changing the second argument, and you can also use this function within the `lm()` function to fit polynomial regression models if you'd like.\n:::\n\nDoes the cubic model appear to be necessary? Use the `summary()` function to explore the fitted model and run a hypothesis test for the cubic term. What do you conclude?\n\n\nWhat degrees of freedom did R for the t-distribution used to calculate the p-value for the test of the cubic term?\n\n\nDo you notice anything curious about the inferential results for the linear and quadratic terms?\n\n\nThe issue here is that the polynomial terms for year are highly correlated with each other (i.e., year, year$^2$, and year$^3$ are correlated). This can lead to numerical instability and make it difficult to interpret the coefficients. This is a situation called **multicollinearity**. We'll talk more about this later. One way to remedy this issue in polynomial regression is to use orthogonal polynomials, which are uncorrelated with each other. \n\n## An alternative way to fit polynomials\n\nTo fit polynomial model with uncorrelated polynomial terms use the `poly()` function. For example, to fit a cubic model using orthogonal polynomials, we can run the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncubic_lm_ortho <- lm(Acres ~ poly(Year, 3), data = wildfires)\n```\n:::\n\n\nUse the `summary()` function to explore the fitted model. What do you notice about the inferential results for the linear, quadratic, and cubic terms? How does this compare to the previous cubic model we fit? How does it compare to the quadratic model?\n\n\n:::{.calllout-note}\nThe method of constructing the polynomial terms in our regression model does not change our predictions, but it can change the inferential results for the polynomial terms.\n:::\n\n\n***\n\n## Function quick reference\n\nThe following table summarizes the functions we learned today:\n\n| Function | Purpose |\n|----|-----------|\n| `lm(formula, data)` | Fit a linear model. For polynomial regression the formula should include polynomial terms or use `poly()`. |\n| `I()` | Used to create polynomial terms in a regression model |\n| `poly(x, degree)` | Create orthogonal polynomial terms |\n\n\n",
    "supporting": [
      "07H-mlr-polynomial_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}