{
  "hash": "1d962ea35b192d847be61b8c187c3023",
  "result": {
    "markdown": "---\ntitle: \"Review of R/RStudio and EDA\"\nformat: html\n---\n\n\n<!-- # Overview of R Markdown files -->\n\nIn this course we will work with R Markdown files in class.\n\nTry executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Cmd/Cntrl+Shift+Enter*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\nAdd a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Cmd/Cntrl+Option+I*.\n\nWhen you save your work, a file containing the code **and** output will be saved alongside it (click the *Knit* button or press *Cmd+Shift+K* to preview the PDF file; you may need to change the output type to HTML or Word if you don't have LaTeX installed on your computer).\n\n# Your First R session\n\nWhile you are learning the R language, remember that you are learning a new language; thus, we will start rather simply with small analysis tasks and build up to more complicated tasks. Also, you will not remember everything immediately---that's OK, it's a natural part of learning a language!\n\n## Installing and loading R packages\n\nR does not enable all of its functionality when you open it. To enable additional functionality we need to load *R packages*. In this class, we will often use the `dplyr` R package to enable better tools for data manipulation and the `ggformula` package to enable better tools for plotting. Below is an example of installation and loading:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# You only need to install a package once\n# If you use the server, then these packages are already installed\ninstall.packages(\"dplyr\")\ninstall.packages(\"ggformula\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# You will need to load the package in each R markdown notebook\nlibrary(dplyr)\nlibrary(ggformula)\n```\n:::\n\n\nNote: I added the `message = FALSE` argument to this code chunk to avoid unnecessary messages\n\nAdditionally, if you are using your own computer and do not have LaTeX installed, then you can run the following command in the console to install a LaTeX distribution so that you can knit your R Markdown files to PDF.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('tinytex')\ntinytex::install_tinytex()\n```\n:::\n\n\n## Loading data and assignment\n\nRegression models are fit to data sets, so data will play a central role in this course. There are multiple ways to load data sets (and we'll learn more about them later), but we often need to load a `.csv` (comma separated value) file.\n\nToday, we'll look at a data set containing information on health evaluation and linkage to primary care.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the data and assign it a name\nHELPrct <- read.csv(\"https://aloy.rbind.io/data/HELPrct.csv\")\n```\n:::\n\n\n## Data frames\n\nThe `HELPrct` object is our first example of a data frame, which is essentially a list of vectors. We can get a first glimpse of our data set in a few ways:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Printing the first 6 rows\n# Note that missing values are denoted by NA\nhead(HELPrct)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Looking at the number of rows and columns\ndim(HELPrct)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Looking at the structure\nstr(HELPrct)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Another way to look at the structure\ndplyr::glimpse(HELPrct)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# looking at quick summary statistics\nsummary(HELPrct)\n```\n:::\n\n\n# Exploring the Data\n\nIn this course, we'll work with data sets that have a combination of quantitative and categorical variables. Oftentimes, an important first step (before doing any analysis) is to explore the data. Here are some plots and summary statistics that are frequently used to visually display the data.\n\n## Graphics via `ggformula`\n\nThe `ggformula` package provides a formula interface to the ggplot2 package. I have found this interface easier to learn, allowing you to focus on your analysis.\n\nThe basic syntax to create a plot using `ggformula` is:\n\n`goal ( y ~ x, data = mydata, ...)`\n\nwhere\n\n-   `goal`: specifies what plot you want to create,\n-   `y`: is the response variable,\n-   `x`: is the explanatory variable, and\n-   `mydata`: is the name of your data set\n\nCommon goals (i.e. graph types) include:\n\n-   Univariate graphics\n\n    -   bar chart: `gf_bar`,\n    -   histogram: `gf_histogram`\n    -   density plot: `gf_density`\n\n-   Bivariate graphics\n\n    -   segmented/stacked bar chart: `gf_bar`\n    -   boxplots: `gf_boxplot`\n    -   scatterplots: `gf_point`\n\n## Summaries by group with `dplyr`\n\nTo summarize numeric variables across groups, I prefer the tools in `dplyr`. Why? `dplyr`...\n\n-   easily allows you to use split-apply-combine thought process,\n-   makes your code more readable,\n-   provides logically named functions,\n-   works with chaining syntax, and\n-   provides tools for subsetting and other data manipulation tasks.\n\nFrom your previous statistics course, you may be familiar with the `tapply` function. For example, the below code calculates the standard deviation of `age` by `sex`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntapply(HELPrct$age, HELPrct$sex, sd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  female     male \n7.584858 7.750110 \n```\n:::\n:::\n\n\nHere is the analogous `dplyr` version:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHELPrct %>%\n  group_by(sex) %>%\n  summarize(sd = sd(age))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  sex       sd\n  <chr>  <dbl>\n1 female  7.58\n2 male    7.75\n```\n:::\n:::\n\n\nWhat's up with the `%>%`? That is known at the *pipe operator* and allows us to chain together commands by passing the object on the left side into the first argument of the function on the right. For example, the above code\n\n-   takes the `HELPrct` data set, and then\n-   groups it by `sex`, and then\n-   summarizes the grouped data set by calculating the standard deviation of `age`.\n\nWhile this might not seem easier now, it will help as we progress through the course.\n\n## Univariate summaries\n\n### Categorical variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(HELPrct$sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nfemale   male \n   107    346 \n```\n:::\n\n```{.r .cell-code}\ngf_bar(~ sex, data = HELPrct)\n```\n\n::: {.cell-output-display}\n![](01-edaR-review_files/figure-html/unnamed-chunk-13-1.png){width=288}\n:::\n:::\n\n\n### Quantitative variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(HELPrct$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  19.00   30.00   35.00   35.65   40.00   60.00 \n```\n:::\n\n```{.r .cell-code}\nsd(HELPrct$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.710266\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~ age, data = HELPrct)\ngf_density(~ age, data = HELPrct)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](01-edaR-review_files/figure-html/unnamed-chunk-16-1.png){width=576}\n:::\n:::\n\n\n## Bivariate summaries\n\n### Categorical vs. categorical\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(HELPrct$sex, HELPrct$substance)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        \n         alcohol cocaine heroin\n  female      36      41     30\n  male       141     111     94\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_bar( ~ substance, data = HELPrct, fill = ~sex)\ngf_bar( ~ substance, data = HELPrct, fill = ~sex, position = position_dodge())\ngf_bar( ~ substance, data = HELPrct, fill = ~sex, position = position_fill())\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: viridisLite\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'viridis'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:scales':\n\n    viridis_pal\n```\n:::\n\n::: {.cell-output-display}\n![](01-edaR-review_files/figure-html/unnamed-chunk-19-1.png){width=864}\n:::\n:::\n\n\n### Quantitative vs. categorical\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using dplyr\nHELPrct %>%\n  group_by(racegrp) %>%\n  summarize(min = min(age),\n            Q1 = quantile(age, prob = .25),\n            median = median(age),\n            Q3 = quantile(age, prob = .75),\n            max = max(age),\n            mean = mean(age),\n            sd = sd(age),\n            n = length(age))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 9\n  racegrp    min    Q1 median    Q3   max  mean    sd     n\n  <chr>    <int> <dbl>  <dbl> <dbl> <int> <dbl> <dbl> <int>\n1 black       20  31       35  39      60  35.7  7.08   211\n2 hispanic    21  28.2     32  36.2    55  33.2  7.99    50\n3 other       22  30       34  40.5    48  35.0  7.66    26\n4 white       19  30       36  42      58  36.5  8.28   166\n```\n:::\n\n```{.r .cell-code}\ngf_boxplot(age ~ racegrp, data = HELPrct)\n```\n\n::: {.cell-output-display}\n![](01-edaR-review_files/figure-html/unnamed-chunk-20-1.png){width=288}\n:::\n:::\n\n\n### Quantitative vs. Quantitative\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(HELPrct$i1, HELPrct$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2069538\n```\n:::\n\n```{.r .cell-code}\ngf_point(i1 ~ age, data = HELPrct)\n```\n\n::: {.cell-output-display}\n![](01-edaR-review_files/figure-html/unnamed-chunk-21-1.png){width=288}\n:::\n:::\n\n\n<!-- **Helpful Tips** -->\n\n<!-- - R is case sensitive: `x` is not the same thing as `X`. -->\n\n<!-- - In the console, `>` means R is ready for a new command, whereas `+` means R is waiting for you to finish an existing command. Hitting ESC gets you out of the latter scenario if you’re there by accident. -->\n\n<!-- - Not sure what a function like `summary()` does? Type the function name preceded by a question mark, like this: `?summary` to get help. Scroll down to Examples – replicate some of these on your own. -->\n\n<!-- - If R throws you an error, read it before you panic. Usually, the error is more interpretable than you think! -->\n",
    "supporting": [
      "01-edaR-review_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}