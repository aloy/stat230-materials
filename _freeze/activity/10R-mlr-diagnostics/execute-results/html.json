{
  "hash": "b804d8bd0abf111aa652ec8c9ba69f5d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Regression Diagnostics\"\nwebr:\n  packages:\n    - car\n    - ggResidpanel\n    - broom\n    - ggformula\nformat: \n  live-html:\n    toc: true\neditor: source\neditor_options: \n  chunk_output_type: console\nexecute:\n  eval: false\n---\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n## Overview\n\nIn this activity you will learn how to calculate diagnostic measures and create diagnostic plots for multiple linear regression models in R. \n\n\n\n## Model overview\n\nA hospital surgical unit was interested in predicting the survival in patients undergoing a particular type of liver operation. A random selection of 108 patients was selected for analysis. For each patient, the following information was extracted from the pre-operation evaluation and used by the research team to predict survival time (in days):\n\n- `blood_clot_score`: a score based on blood clotting tests\n- `prognostic_index`: a prognostic index based on various health factors\n- `enzyme_test`: a score based on liver enzyme tests\n- `alchohol_use_heavy`: an indicator variable for heavy alcohol use (1 = heavy use, 0 = not heavy use)\n\nThe research team determined that the following multiple regression model is a reasonable starting point:\n\n$$\n\\text{survival time} = \\beta_0 + \\beta_1(\\text{blood clot score}) + \\beta_2(\\text{prognostic index}) + \\beta_3(\\text{enzyme test}) + \\beta_4(\\text{heavy alcohol use}) + \\epsilon\n$$\n\nThis model is fit using the below code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurgical_lm <- lm(survival_time ~ blood_clot_score + prognostic_index + enzyme_test + alchohol_use_heavy, data = surgical_data)\n```\n:::\n\n\n\n## Residual analysis in R\n\nWhen we have multiple predictors, we can still use residual plots to assess the assumptions of the linear regression model. You can still use the `resid_panel(model, type = \"standardized\")` function in the `ggResidpanel` package to create a panel of residual plots that includes a plot of the residuals vs. fitted values, a histogram of the residuals, and a Q-Q plot of the residuals. \n\n\n::: {.cell}\n\n```{.webr .cell-code}\nlibrary(ggResidpanel)\nresid_panel(surgical_lm, type = \"standardized\")\n```\n:::\n\n\n\n\nTo get plots of the standardized residuals against the individual predictors, I recommend using the `residualPlots()` command in the `car` package. Below is the code to create these plots for the surgical data example.\n\n\n::: {.cell}\n\n```{.webr .cell-code}\nlibrary(car)\nresidualPlots(surgical_lm, type = \"rstandard\", tests = FALSE, quadratic = FALSE, layout = c(2, 3))\n```\n:::\n\n\nKey arguments to the `residualPlots()` function include:\n\n- `model`: the linear model object created using the `lm()` function\n- `type = \"rstandard\"`: specifies that we want to plot the standardized residuals\n- `tests = FALSE`: removes the automatic addition of significance tests for non-linearity\n- `quadratic = FALSE`: removes a quadratic smoother on the residual plot\n- `layout = c(2, 3)`: specifies the layout of the plots (2 rows and 3 columns), which is useful for organizing multiple plots in a single view\n\n**Question:** Based on the residual plots, do you think the current multiple linear regression model is appropriate for this data? Why or why not?\n\n**Question:** Regardless of your answer, apply a log transformation to the response variable and refit the model using the code below. Then, create the same residual plots for the new model. Do you think the log transformation improved the model fit? Why or why not?\n\n\n::: {.cell}\n\n```{.webr .cell-code}\nlog_surgical_lm <- lm(log(survival_time) ~ blood_clot_score + prognostic_index + enzyme_test + alchohol_use_heavy, data = surgical_data)\n\n# Put your residual plot code here\n```\n:::\n\n\n\n## Influence analysis\n\nLet's continue working with the log-transformed model. We can use the `influenceIndexPlot()` function in the `car` package to create influence plots for the log-transformed model. Each plot will display one of the diagnostic measures and plot it against the row number (index). Below is the code to create these plots for the surgical data example.\n\n\n::: {.cell}\n\n```{.webr .cell-code}\ninfluenceIndexPlot(log_surgical_lm, vars = c(\"hat\", \"student\", \"Cook\"))\n```\n:::\n\n\nKey arguments to the `influenceIndexPlot()` function include:\n\n- `model`: the linear model object created using the `lm()` function\n- `vars = c(\"hat\", \"student\", \"Cook\", )`: specifies which influence measures to plot. In this case, we are plotting Cook's distance, leverage (hat values), and studentized (standardized) residuals\n\n**Question:** What observations (row numbers) are identified as possibly influential in each of the three plots? \n\n**Question:** Do you think any of these observations are truly influential? Why or why not? It may be useful to look back through your notes to review the definitions of these influence measures and the suggested cutoffs.\n\n\n\n## Alternative R implementation for influence measures\n\nWhile the use of the `influenceIndexPlot()` function is a quick way to visualize influence measures, it does not provide the actual values of these measures. To obtain the actual values, we can use the `augment()` function in the `broom` R package. Below is the code to obtain these measures for the log-transformed model.\n\n\n::: {.cell}\n\n```{.webr .cell-code}\nlibrary(broom)\nlog_surgical_lm_aug <- augment(log_surgical_lm)\nhead(log_surgical_lm_aug)\n```\n:::\n\n\nThe `augment()` function adds several columns to the original data frame, including:\n\n- `.fitted`: the fitted values from the model\n- `.resid`: the residuals from the model\n- `.std.resid`: the standardized residuals from the model\n- `.hat`: the leverage (hat values) from the model\n- `.cooksd`: Cook's distance from the model\n\n\n***\n\n## Function quick reference\n| Function                  | Package        | Description                                                                                   |\n|:--------------------------|:---------------|:----------------------------------------------------------------------------------------------|\n| `resid_panel()`           | `ggResidpanel` | Creates a panel of residual plots for a linear model                                                     |\n| `residualPlots()`         | `car`          | Creates residual plots for each predictor in a linear model                                                |\n| `influenceIndexPlot()`    | `car`          | Creates influence plots for a linear model                                                        |\n| `augment()`               | `broom`        | Adds columns to a data frame with information about a model fit, including residuals and influence measures |",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}