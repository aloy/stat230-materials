{
  "hash": "1e44061fbb40359b98022fda5b8dddb8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Transformations\"\nwebr:\n  packages:\n    - ggformula\n    - ggResidpanel\nformat: \n  live-html:\n    toc: true\nengine: knitr\neditor: source\n---\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## Example: Mammal brain weights\n\nResearchers wish to understand the relationship between the brain weights (y, in grams) and body weights (x, in kilograms) of mammals. They have data on a sample of 30 species of mammals, which can be loaded using the code shown below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight <- read.csv(\"https://aloy.rbind.io/kuiper_data/Weights.csv\")\n```\n:::\n\n\n(a) Fit a simple linear regression model using body weight to predict brain weight.\n\n\n::: {.cell}\n```{webr}\n\n```\n:::\n\n\n\n(b) Create a scatterplot of $y$ versus $x$ with a regression line, a plot of the residuals vs. predicted (or \"fitted\") values ($\\widehat{y}$), and either a normal Q-Q plot or a histogram of the residuals. (Remember that you can use the `resid_panel()` command in the `ggResidpanel` R package for residual plots.) Summarize what issues you see with the regression conditions.\n\n\n::: {.cell}\n```{webr}\n\n```\n:::\n\n\n\n(b) Try various transformations of the explanatory and response variables to create a better linear regression model. (Hint: Notice that both the $x$ and $y$ variables are right skewed and have outliers, both may need a transformation.) What transformation(s) seem to remedy the issues you saw in part (b)?\n\n\n::: {.cell}\n```{webr}\n\n```\n:::\n\n\n\n\n## Back-transforming your model\n\nIn Example 1 you selected transformation(s) to help \"linearize\" the relationship between brain weights and body weights. While this is helpful from a statistical perspective, it's often preferred to plot the fitted model on the **original scale** of the data. To do this, we need to back-transform the model using the following steps:\n\n\n- Start by creating a scatterplot on the original scale. \n- Add a `gf_lm()` layer, specifying the transformations in the `formula` and **if $y$ is transformed** how to back-transform $y$ via the `backtrans` argument. \n\nFor example, if we log-transformed both `x` and `y`, then we pass `log(y) ~ log(x)` in as the formula to `gf_lm()` and `backtrans = exp` to backtransform `y`. Below is the full call where `df` is the data set with columns `xvar` and `yvar`. \n\n::: {.cell}\n\n```{.r .cell-code}\n# change variable names and data set name here\ngf_point(yvar ~ xvar, data = df) |> \n  gf_lm(formula = log(y) ~ log(x), backtrans = exp, interval = \"confidence\")\n```\n:::\n\n\nUse this idea to plot the fitted model relating brain weights and body weights on the original scale.\n\n\n::: {.cell}\n```{webr}\n\n```\n:::\n\n\n\n\n",
    "supporting": [
      "06H-slr-transform_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}